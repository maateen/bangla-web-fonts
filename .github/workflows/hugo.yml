name: Hugo site CI/CD

'on':
  # Runs on pushes targeting the default branch
  push:
    branches: ["main"]
  # Runs on Pull Requests
  pull_request:
    branches: ["main"]
    types: [opened, synchronize, reopened]

env:
  HUGO_VERSION: 0.150.1
  FONT_TOOLS_VERSION: 4.56.0
  CLOUDFLARE_CUSTOM_DOMAIN: ${{ vars.CLOUDFLARE_CUSTOM_DOMAIN }}
  CLOUDFLARE_PROJECT_NAME: ${{ vars.CLOUDFLARE_PROJECT_NAME }}

# Sets permissions for Cloudflare Pages deployment and PR comments
permissions:
  contents: read
  deployments: write
  issues: write
  pull-requests: write

# Allow only one concurrent deployment
concurrency:
  cancel-in-progress: true
  group: "pages"

# Default to bash
defaults:
  run:
    shell: bash

jobs:
  # Deploy job
  deploy:
    if: github.event_name == 'push' || github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    steps:
      - name: Install Hugo CLI & dependencies
        run: |
          HUGO_URL="https://github.com/gohugoio/hugo/releases/download"
          HUGO_FILE="hugo_extended_${HUGO_VERSION}_linux-amd64.deb"
          wget -O ${{ runner.temp }}/hugo.deb "${HUGO_URL}/v${HUGO_VERSION}/${HUGO_FILE}"
          sudo dpkg -i ${{ runner.temp }}/hugo.deb
          pip install "fonttools[woff]"==${FONT_TOOLS_VERSION}

      - name: Verify Hugo CLI & dependencies
        run: |
          echo "hugo version: $(hugo version)"
          echo "ttx version: $(ttx --version)"
          echo "brotli version: $(brotli --version)"

      - name: Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
          submodules: recursive

      - name: Generate woff2 fonts
        run: |
          echo "üîß Converting TTF fonts to WOFF2..."
          find ./fonts -name "*.ttf" -type f -exec ttx -fai "{}" \;
          find ./fonts -name "*.ttx" -type f -exec ttx -fb --no-recalc-timestamp --flavor woff2 "{}" \;
          find ./fonts -name "*.ttx" -type f -delete
          echo "‚úÖ Font conversion completed"

      - name: Copy fonts to docs/content folder
        run: |
          echo "üìÅ Moving fonts to docs/content..."
          mv fonts docs/content
          echo "‚úÖ Fonts moved successfully"

      - name: Build with Hugo (Production)
        if: github.event_name == 'push'
        run: |
          echo "üèóÔ∏è Building Hugo site for production..."
          cd docs
          hugo \
            --gc \
            --minify \
            --enableGitInfo \
            --environment Production \
            --baseURL "https://${CLOUDFLARE_CUSTOM_DOMAIN}/"
          echo "‚úÖ Hugo production build completed"

      - name: Build with Hugo (Preview)
        if: github.event_name == 'pull_request'
        run: |
          echo "üèóÔ∏è Building Hugo site for preview..."
          cd docs
          hugo \
            --gc \
            --minify \
            --enableGitInfo \
            --environment Preview
          echo "‚úÖ Hugo preview build completed"

      - name: Check build output
        run: |
          if [ -d "docs/public" ]; then
            echo "‚úÖ Build successful"
            echo "Generated files:"
            ls -la docs/public/
          else
            echo "‚ùå Build failed - 'docs/public' directory not found"
            exit 1
          fi

      - name: Deploy to Cloudflare Pages (Production)
        if: github.event_name == 'push'
        id: deploy-prod
        uses: cloudflare/wrangler-action@v3
        with:
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          command: >
            pages deploy docs/public
            --commit-dirty=true
            --project-name=${{ env.CLOUDFLARE_PROJECT_NAME }}

      - name: Deploy to Cloudflare Pages (Preview)
        if: github.event_name == 'pull_request'
        id: deploy-preview
        uses: cloudflare/wrangler-action@v3
        with:
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          command: >
            pages deploy docs/public
            --commit-dirty=true
            --project-name=${{ env.CLOUDFLARE_PROJECT_NAME }}

      - name: Comment PR with preview link
        if: github.event_name == 'pull_request'
        env:
          CLOUDFLARE_DEPLOYMENT_URL: ${{ steps.deploy-preview.outputs.deployment-url }}
        uses: actions/github-script@v7
        with:
          script: |
            const prNumber = context.payload.pull_request.number;
            const projectName = "${{ env.CLOUDFLARE_PROJECT_NAME }}";
            const previewUrl = "${{ env.CLOUDFLARE_DEPLOYMENT_URL }}";

            const comment = `## üîç Preview Deployment

            Your changes have been deployed to a preview environment:

            **Preview URL:** ${previewUrl}

            This preview will be updated automatically when you push new commits to this PR.
            `;

            // Check if preview comment already exists
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber,
            });

            const existingComment = comments.find(comment =>
              comment.body.includes('üîç Preview Deployment')
            );

            if (existingComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: existingComment.id,
                body: comment
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: prNumber,
                body: comment
              });
            }
